#! /usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    Usage:
        ./3d_transcription_map COORD EXP [--nb_genes INT] [--cpu INT] [--output PATH]

    Arguments:
        COORD                           Path to the file containing informations
                                        about 3D coordinates of the genes.
        EXP                             Path to the file containing the gene expression
                                        values in different conditions.
    Options:
        -h, --help                      Show this.
        -n INT, --nb_genes INT          Indicates the number of genes nearby
                                        to take into account. [default: 10]
        -c INT, --cpu INT               Number of cpus to use for parallelisation. By default
                                        using all available (0).
                                        [default: 0]
        -o PATH, --output Path          Path to the generated plot (html format).
                                        [default: result/plot.html]
"""

# Third-party modules
import os
from multiprocessing import Pool, cpu_count
from functools import partial
from datetime import datetime
from tqdm import tqdm
from docopt import docopt
from schema import Schema, And, Use, SchemaError
import pandas as pd

# Local modules
import src.calculation as calculation
import src.visualization as visualization


def check_args():
    """
        Checks and validates the types of inputs parsed by docopt from command line.
    """
    schema = Schema({
        'COORD': Use(open, error='Gene coordinate file should be readable.'),
        'EXP': Use(open, error='Gene expression file should be readable.'),
        # '--nb_genes': And(Use(int), lambda n: 1 <= n <= 100,\
        #                     error='--nb_genes should be integer 1 <= n <= 100'),
        '--cpu': And(Use(int), lambda n: 0 <= n <= cpu_count(),
                     error='--cpus should be integer 1 <= n <= ' + str(cpu_count())),
        # so we skip the check.
        object: object})
    try:
        schema.validate(ARGUMENTS)
    except SchemaError as err:
        exit(err)

if __name__ == "__main__":

    START_TIME = datetime.now()

    ### Parse command line
    ######################

    ARGUMENTS = docopt(__doc__, version='3d_transcription_map 1.0')

    # Check the types and ranges of the command line arguments parsed by docopt
    check_args()

    COORD_FILE = ARGUMENTS["COORD"]
    EXP_FILE = ARGUMENTS["EXP"]
    NB_GENES = int(ARGUMENTS["--nb_genes"])
    CPU = cpu_count() if int(ARGUMENTS["--cpu"]) == 0 else int(ARGUMENTS["--cpu"])
    OUTPUT_PATH = ARGUMENTS["--output"]

    # COORD_FILE = "data/toy_ex_coord.txt"
    # EXP_FILE = "data/toy_ex_profiles.txt"
    # NB_GENES = 10
    # CPU = 4

    ### Data frames
    ###############
    COORD = pd.read_csv(COORD_FILE, sep='\t')
    EXP = pd.read_csv(EXP_FILE, sep='\t')
    print("\n\nProcessing correlation matrix... ", end="")
    CORR = EXP.transpose().corr(method="spearman")
    print("done.")

    ### Main calculations
    #####################
    # Parallelization of the main loop
    with Pool(processes=CPU) as pool:
        FUNC = partial(calculation.calculate_transcription_map, COORD,
                       CORR, NB_GENES)
        print("\nProcessing on genes... ({} cpus detected, using {})".format(str(cpu_count()), str(CPU)))
        TRANSCRIPTION_MAP = [gene for gene in tqdm(pool.imap_unordered(FUNC, COORD.index),\
                            total=len(COORD.index))]

    ### 3D plot
    ###########
    print('\nGeneration of the 3D interactive plot... ', end="")
    visualization.visualize_4d_genome(COORD, TRANSCRIPTION_MAP, OUTPUT_PATH)
    print('The plot is saved in {}'.format(OUTPUT_PATH))

    print("\nTotal runtime: {} seconds".format(str(datetime.now() - START_TIME)))

    CORR.to_csv('result/correlation.csv')

    ## ENRICHMENT
    #############
    # import gseapy as gp
    # glist = COORD.index.tolist()

    # enr = gp.enrichr(gene_list=glist,
    #                  description='pathway_analysis',
    #                  gene_set='KEGG_2016',
    #                  outdir='test',
    #                 )
