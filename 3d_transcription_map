#! /usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    Usage:
        ./3d_transcription_map COORD EXP [--closest_genes INT] [--cpu INT]

    Arguments:
        COORD                               Path to the file containing informations
                                            about 3D coordinates of the genes.
        EXP                                 Path to the file containing the gene expression
                                            values in different conditions.
    Options:
        -h, --help                          Show this.
        -n INT, --closest_genes INT         Indicates the number of genes nearby
                                            to take into account.
                                            [default: 10]
        -c NUM, --cpu NUM                   Number of cpus to use for parallelisation. By default
                                            using all available (0).
                                            [default: 0]
"""

# Third-party modules
import os
from multiprocessing import Pool, cpu_count
from functools import partial
from datetime import datetime
from tqdm import tqdm
from docopt import docopt
from schema import Schema, And, Use, SchemaError
import pandas as pd

# Local modules
import src.calculation as calculation
import src.visualization as visualization


def check_args():
    """
        Checks and validates the types of inputs parsed by docopt from command line.
    """
    schema = Schema({
        'COORD': Use(open, error='Gene coordinate file should be readable.'),
        'EXP': Use(open, error='Gene expression file should be readable.'),
        # '--closest_genes': And(Use(int), lambda n: 0 <= n <= 100,\
        #                     error='--closest_genes should be integer 0 <= n <= 100'),
        '--cpu': And(Use(int), lambda n: 0 <= n <= cpu_count(),
                 error='--cpus=NUM should be integer 1 <= N <= ' + str(cpu_count())),
        # The output PATH is created (if not exists) at the end of the program
        # so we skip the check.
        object: object})
    try:
        schema.validate(ARGUMENTS)
    except SchemaError as err:
        exit(err)

if __name__ == "__main__":

    START_TIME = datetime.now()

    ### Parse command line
    ######################

    ARGUMENTS = docopt(__doc__, version='3d_transcription_map 1.0')

    # Check the types and ranges of the command line arguments parsed by docopt
    check_args()

    COORD_FILE = ARGUMENTS["COORD"]
    EXP_FILE = ARGUMENTS["EXP"]
    CLOSEST_GENES = int(ARGUMENTS["--closest_genes"])
    CPU = cpu_count() if int(ARGUMENTS["--cpu"]) == 0 else int(ARGUMENTS["--cpu"])



    ### Data frames
    ###############
    COORD = pd.read_csv(COORD_FILE, sep='\t')
    EXP = pd.read_csv(EXP_FILE, sep='\t')
    CORR = EXP.transpose().corr(method="spearman")
    print('correlations done')


    ### Main calculations
    #####################
    # Parallelization of the main loop
    with Pool(processes=CPU) as pool:
        FUNC = partial(calculation.calculate_transcription_map, COORD,
                       CORR, CLOSEST_GENES)
        os.system("clear")
        print("\n" + str(cpu_count()) + " cpus detected, using " + str(CPU))
        print("\n\nProcessing ...\n")
        TRANSCRIPTION_MAP = [gene for gene in tqdm(pool.imap_unordered(FUNC, COORD.index),\
                            total=len(COORD.index))]

    ### 3D plot
    ###########
    visualization.visualize_4d_genome(TRANSCRIPTION_MAP, COORD)

    print("\nTotal runtime: {} seconds".format(str(datetime.now() - START_TIME)))
