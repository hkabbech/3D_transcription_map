#! /usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    Usage:
        ./3d_transcription_map [--gene_coordinates FILE] [--gene_expression FILE]
                                  [--nb_bins INT] [--output PATH]

    Options:
        -h, --help                            Show this.
        -coord FILE, --gene_coordinates FILE  Path to the file containing informations
                                              about 3D coordinates of the genes.
                                              [default: data/SCHIZONTS.genes_pos.txt]
        -exp FILE, --gene_expression FILE     Path to the file containing the gene expression
                                              values in different conditions.
                                              [default: data/profiles_Otto2010.min]
        -n INT, --nb_bins INT                   Indicates the number of bins nearby
                                                to take into account.
                                                [default: 1]
        -o PATH, --output PATH                  Path to the directory containing
                                                the result files (scores and pdb).
                                                [default: res]
"""

# Third-party modules
from docopt import docopt
from schema import Schema, And, Use, SchemaError
import numpy as np

# Local modules
import src.parsing as parsing
import src.calculation as calculation


def check_args():
    """
        Checks and validates the types of inputs parsed by docopt from command line.
    """
    schema = Schema({
        '--gene_coordinates': Use(open, error='GENOME COORDINATES file should be readable.'),
        '--gene_expression': Use(open, error='TRANSCRIPTOMICS file should be readable.'),
        '--nb_bins': And(Use(int), lambda n: 0 <= n <= 100,\
                                error='--nb_bins should be integer 0 <= N <= 100.'),
        # The output PATH is created (if not exists) at the end of the program
        # so we skip the check.
        object: object})
    try:
        schema.validate(ARGUMENTS)
    except SchemaError as err:
        exit(err)

if __name__ == "__main__":


    ### Parse command line
    ######################
    ARGUMENTS = docopt(__doc__, version='3d_transcription_map 1.0')

    # Check the types and ranges of the command line arguments parsed by docopt
    check_args()

    GENE_COORDINATES_FILE = ARGUMENTS["--gene_coordinates"]
    GENE_EXPRESSION_FILE = ARGUMENTS["--gene_expression"]
    NB_BINS = int(ARGUMENTS["--nb_bins"])
    OUTPUT_PATH = ARGUMENTS["--output"]


    ### Parse data files
    ####################
    GENES = parsing.parse_gene_coordinates(GENE_COORDINATES_FILE)


    ### Main calculations
    #####################
    DISTANCES_MATRIX = calculation.calculate_distances_matrix(GENES)
